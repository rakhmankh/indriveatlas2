# app.py
import streamlit as st
import pandas as pd
import pydeck as pdk
from geopy.distance import geodesic

st.set_page_config(page_title="inDrive Hackathon", layout="wide")



# ======================================================
# –ú–µ–Ω—é
# ======================================================
page = st.sidebar.radio("–ú–µ–Ω—é", [
    "üöï –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–µ–∑–¥–∫–∏",
    "üî• –ì–æ—Ä—è—á–∏–µ –∑–æ–Ω—ã",
    "üì≤ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º",
    "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø—Ä–æ—Å–∞",
    "üö® –ê–Ω–æ–º–∞–ª–∏–∏"
])

# ======================================================
# üöï –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–µ–∑–¥–∫–∏ (—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –¥–ª–∏–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∞)
# ======================================================
if page == "üöï –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–µ–∑–¥–∫–∏":
    st.subheader("üöï –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–µ–∑–¥–∫–∏")
    try:
        df = pd.read_csv("data/clean_trips.csv")[["randomized_id", "latitude", "longitude", "timestamp"]]

        if "current_trip" not in st.session_state:
            if st.button("üöï –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–µ–∑–¥–∫—É"):
                trip_id = df["randomized_id"].sample(1).iloc[0]
                trip = df[df["randomized_id"] == trip_id].reset_index(drop=True)
                st.session_state.current_trip = trip
                st.session_state.step = 1
                st.session_state.trip_id = trip_id
                st.success("‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω, –ø–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!")
            else:
                st.info("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ–µ–∑–¥–∫—É üöï")

        if "current_trip" in st.session_state:
            trip = st.session_state.current_trip
            trip_id = st.session_state.trip_id

            speed = st.slider("‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ (–º—Å)", 200, 2000, 700, step=100)
            st.write(f"**üÜî ID –ø–æ–µ–∑–¥–∫–∏:** `{trip_id}`")

            import time
            progress = st.progress(0, text="üöñ –ü–æ–µ–∑–¥–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
            chart_placeholder = st.empty()

            for step in range(st.session_state.step, len(trip) + 1):
                st.session_state.step = step
                df_step = trip.iloc[:step]

                percent = int((step / len(trip)) * 100)
                progress.progress(percent, text=f"üöñ –ü–æ–µ–∑–¥–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è... {percent}%")

                start_layer = pdk.Layer(
                    "ScatterplotLayer",
                    trip.iloc[[0]],
                    get_position=["longitude", "latitude"],
                    get_color=[0, 255, 0],
                    get_radius=120,
                )
                end_layer = pdk.Layer(
                    "ScatterplotLayer",
                    trip.iloc[[-1]],
                    get_position=["longitude", "latitude"],
                    get_color=[255, 0, 0],
                    get_radius=120,
                )
                route_layer = pdk.Layer(
                    "PathLayer",
                    [{"path": df_step[["longitude", "latitude"]].values.tolist()}],
                    get_path="path",
                    get_color=[255, 0, 0],
                    width_scale=20,
                    width_min_pixels=2,
                )
                car_layer = pdk.Layer(
                    "ScatterplotLayer",
                    df_step.tail(1),
                    get_position=["longitude", "latitude"],
                    get_color=[0, 150, 255],
                    get_radius=100,
                    pickable=True,
                )

                view_state = pdk.ViewState(
                    latitude=df_step["latitude"].mean(),
                    longitude=df_step["longitude"].mean(),
                    zoom=13,
                    pitch=40,
                )

                chart = pdk.Deck(
                    layers=[route_layer, start_layer, end_layer, car_layer],
                    initial_view_state=view_state,
                    tooltip={"text": "üöñ –ú–∞—à–∏–Ω–∞\n–®–∏—Ä–æ—Ç–∞: {latitude}\n–î–æ–ª–≥–æ—Ç–∞: {longitude}\nüïí –í—Ä–µ–º—è: {timestamp}"}
                )
                chart_placeholder.pydeck_chart(chart)
                time.sleep(speed / 1000.0)

            # –î–ª–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞
            total_distance = 0.0
            for i in range(1, len(trip)):
                p1 = (trip.iloc[i-1]["latitude"], trip.iloc[i-1]["longitude"])
                p2 = (trip.iloc[i]["latitude"], trip.iloc[i]["longitude"])
                total_distance += geodesic(p1, p2).km

            progress.progress(100, text="üèÅ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            st.success(f"‚úÖ –ü–æ–µ–∑–¥–∫–∞ `{trip_id}` –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üéâ")
            st.write(f"üìè –û–±—â–∞—è –¥–ª–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞: **{total_distance:.2f} –∫–º**")

            if st.button("üîÑ –ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞"):
                for k in ["current_trip", "step", "trip_id"]:
                    st.session_state.pop(k, None)

    except FileNotFoundError:
        st.error("‚ùå clean_trips.csv –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ etl/clean_data.py")

# ======================================================
# üî• –ì–æ—Ä—è—á–∏–µ –∑–æ–Ω—ã (heatmap –ø–æ –∞–≥—Ä–µ–≥–∞—Ü–∏—è–º)
# ======================================================
elif page == "üî• –ì–æ—Ä—è—á–∏–µ –∑–æ–Ω—ã":
    st.subheader("üî• –ì–æ—Ä—è—á–∏–µ –∑–æ–Ω—ã (heatmap)")
    try:
        df = pd.read_csv("data/agg_trips.csv")
        layer = pdk.Layer(
            "HeatmapLayer",
            df,
            get_position=["lon_grid", "lat_grid"],
            get_weight="count_trips",
            radius_pixels=40,
        )
        view_state = pdk.ViewState(latitude=51.15, longitude=71.42, zoom=11)
        st.pydeck_chart(pdk.Deck(layers=[layer], initial_view_state=view_state))
    except FileNotFoundError:
        st.error("‚ùå agg_trips.csv –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ etl/aggregate_trips.py")


# ======================================================
# üì≤ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º
# ======================================================
elif page == "üì≤ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º":
    st.subheader("üì≤ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
    try:
        df_assign = pd.read_csv("data/assignments.csv")

        drivers_layer = pdk.Layer(
            "ScatterplotLayer",
            df_assign,
            get_position=["driver_lng", "driver_lat"],
            get_color=[0, 150, 255, 200],
            get_radius=80,
            pickable=True,
        )
        zones_layer = pdk.Layer(
            "ScatterplotLayer",
            df_assign,
            get_position=["zone_lng", "zone_lat"],
            get_color=[255, 0, 100, 200],
            get_radius=120,
            pickable=True,
        )

        lines_df = pd.DataFrame([{
            "from_lon": r["driver_lng"], "from_lat": r["driver_lat"],
            "to_lon": r["zone_lng"], "to_lat": r["zone_lat"],
            "zone_predicted": r["zone_predicted"], "distance_km": r["distance_km"]
        } for _, r in df_assign.iterrows()])

        lines_layer = pdk.Layer(
            "LineLayer",
            lines_df,
            get_source_position=["from_lon", "from_lat"],
            get_target_position=["to_lon", "to_lat"],
            get_color=[200, 200, 200, 150],
            get_width=2,
            pickable=True,
        )

        view_state = pdk.ViewState(latitude=51.15, longitude=71.42, zoom=11, pitch=40)
        st.pydeck_chart(pdk.Deck(
            layers=[drivers_layer, zones_layer, lines_layer],
            initial_view_state=view_state,
            tooltip={"text": "üöñ –í–æ–¥–∏—Ç–µ–ª—å ‚Üí –ó–æ–Ω–∞\nüìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance_km}\nüìà –ü—Ä–æ–≥–Ω–æ–∑: {zone_predicted}"}
        ))
        st.markdown("### üìã –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        st.dataframe(df_assign)

    except FileNotFoundError:
        st.error("‚ùå assignments.csv –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ etl/visualize.py")

# ======================================================
# üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø—Ä–æ—Å–∞
# ======================================================
elif page == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø—Ä–æ—Å–∞":
    st.subheader("üìà –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: –§–∞–∫—Ç vs –ü—Ä–æ–≥–Ω–æ–∑ + –ë—É–¥–Ω–∏ vs –í—ã—Ö–æ–¥–Ω—ã–µ + What-if")

    # ---------- –§–∞–∫—Ç vs –ü—Ä–æ–≥–Ω–æ–∑ ----------
    try:
        df_fact = pd.read_csv("data/aggregates.csv")
        df_pred = pd.read_csv("data/predictions.csv")

        hour = st.slider("‚è∞ –ß–∞—Å", int(df_fact["hour"].min()), int(df_fact["hour"].max()), int(df_fact["hour"].min()))
        day_map = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        day = st.selectbox("üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", day_map)
        day_num = day_map.index(day)

        fact_filtered = df_fact[(df_fact["hour"] == hour) & (df_fact["dayofweek"] == day_num)].copy()
        pred_filtered = df_pred[(df_pred["hour"] == hour) & (df_pred["dayofweek"] == day_num)].copy()

        # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∏ –≤—ã—Å–æ—Ç—ã (–§–ê–ö–¢)
        if not fact_filtered.empty:
            fact_filtered["count_trips"] = pd.to_numeric(fact_filtered["count_trips"], errors="coerce").fillna(0).clip(lower=0)
            max_c = max(1.0, fact_filtered["count_trips"].max())
            c_norm = (fact_filtered["count_trips"] / max_c * 255).round().clip(0, 255).astype(int)
            fact_filtered["color"] = c_norm.apply(lambda v: [int(v), 50, 150, 200])

        # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∏ –≤—ã—Å–æ—Ç—ã (–ü–†–û–ì–ù–û–ó)
        if not pred_filtered.empty:
            pred_filtered["predicted"] = pd.to_numeric(pred_filtered["predicted"], errors="coerce").fillna(0).clip(lower=0)
            max_p = max(1.0, pred_filtered["predicted"].max())
            p_norm = (pred_filtered["predicted"] / max_p * 255).round().clip(0, 255).astype(int)
            pred_filtered["color"] = p_norm.apply(lambda v: [int(v), 120, 200, 180])

        st.write("üìä –§–∞–∫—Ç:", len(fact_filtered), "—Ç–æ—á–µ–∫ | üìà –ü—Ä–æ–≥–Ω–æ–∑:", len(pred_filtered), "—Ç–æ—á–µ–∫")

        col1, col2 = st.columns(2)
        with col1:
            st.write("üìä –§–∞–∫—Ç")
            if not fact_filtered.empty:
                fact_layer = pdk.Layer(
                    "H3HexagonLayer",
                    fact_filtered,
                    get_hexagon="h3",
                    get_fill_color="color",
                    extruded=True,
                    get_elevation="count_trips",
                    elevation_scale=2,
                    pickable=True,
                )
                st.pydeck_chart(pdk.Deck(
                    layers=[fact_layer],
                    initial_view_state=pdk.ViewState(latitude=51.15, longitude=71.42, zoom=11, pitch=40),
                    tooltip={"text": "üó∫Ô∏è H3: {h3}\nüìä –§–∞–∫—Ç: {count_trips}"}
                ))
            else:
                st.warning("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Å–∞/–¥–Ω—è.")

        with col2:
            st.write("üìà –ü—Ä–æ–≥–Ω–æ–∑")
            if not pred_filtered.empty:
                pred_layer = pdk.Layer(
                    "H3HexagonLayer",
                    pred_filtered,
                    get_hexagon="h3",
                    get_fill_color="color",
                    extruded=True,
                    get_elevation="predicted",
                    elevation_scale=2,
                    pickable=True,
                )
                st.pydeck_chart(pdk.Deck(
                    layers=[pred_layer],
                    initial_view_state=pdk.ViewState(latitude=51.15, longitude=71.42, zoom=11, pitch=40),
                    tooltip={"text": "üó∫Ô∏è H3: {h3}\nüìà –ü—Ä–æ–≥–Ω–æ–∑: {predicted}"}
                ))
            else:
                st.warning("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Å–∞/–¥–Ω—è.")

        # –ú–µ—Ç—Ä–∏–∫–∏
        if not fact_filtered.empty and not pred_filtered.empty:
            merged = pd.merge(
                fact_filtered[["h3", "count_trips"]],
                pred_filtered[["h3", "predicted"]],
                on="h3", how="inner"
            )
            if not merged.empty:
                merged["abs_err"] = (merged["count_trips"] - merged["predicted"]).abs()
                mae = merged["abs_err"].mean()
                merged["perc_err"] = merged["abs_err"] / merged["count_trips"].replace(0, 1)
                mape = merged["perc_err"].mean() * 100
                st.write(f"**MAE:** {mae:.2f} | **MAPE:** {mape:.1f}%")
                st.bar_chart(merged[["count_trips", "predicted"]].reset_index(drop=True))

    except FileNotFoundError:
        st.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –§–∞–∫—Ç vs –ü—Ä–æ–≥–Ω–æ–∑")

    # ---------- –ë—É–¥–Ω–∏ vs –í—ã—Ö–æ–¥–Ω—ã–µ ----------
    st.markdown("## üìä –ë—É–¥–Ω–∏ vs –í—ã—Ö–æ–¥–Ω—ã–µ")
    try:
        df = pd.read_csv("data/agg_trips.csv")
        df["day_type"] = df["day_of_week"].apply(lambda x: "–ë—É–¥–Ω–∏" if x < 5 else "–í—ã—Ö–æ–¥–Ω—ã–µ")
        hourly = df.groupby(["day_type", "hour"])["count_trips"].mean().reset_index()
        c1, c2 = st.columns(2)
        with c1:
            st.line_chart(hourly[hourly["day_type"] == "–ë—É–¥–Ω–∏"].set_index("hour")["count_trips"])
            st.caption("üìà –ë—É–¥–Ω–∏")
        with c2:
            st.line_chart(hourly[hourly["day_type"] == "–í—ã—Ö–æ–¥–Ω—ã–µ"].set_index("hour")["count_trips"])
            st.caption("üìâ –í—ã—Ö–æ–¥–Ω—ã–µ")
    except FileNotFoundError:
        st.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë—É–¥–Ω–∏ vs –í—ã—Ö–æ–¥–Ω—ã–µ")

    # ---------- What-if ----------
    st.markdown("## ü§î What-if —Å—Ü–µ–Ω–∞—Ä–∏–π")
    try:
        df = pd.read_csv("data/agg_trips.csv")
        base_hour = st.slider("‚è∞ –ß–∞—Å –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è", 0, 23, 18, key="whatif_hour")
        increase = st.slider("üìà –†–æ—Å—Ç —Å–ø—Ä–æ—Å–∞ (%)", -50, 200, 50, key="whatif_increase")

        base_data = df[df["hour"] == base_hour].copy()
        base_data["scenario_trips"] = base_data["count_trips"] * (1 + increase / 100)

        base_layer = pdk.Layer(
            "ScatterplotLayer",
            base_data,
            get_position=["lon_grid", "lat_grid"],
            get_color=[0, 150, 255, 150],
            get_radius="count_trips",
            pickable=True,
        )
        scenario_layer = pdk.Layer(
            "ScatterplotLayer",
            base_data,
            get_position=["lon_grid", "lat_grid"],
            get_color=[255, 80, 80, 200],
            get_radius="scenario_trips",
            pickable=True,
        )

        view_state = pdk.ViewState(latitude=51.15, longitude=71.42, zoom=11)
        st.pydeck_chart(pdk.Deck(
            layers=[base_layer, scenario_layer],
            initial_view_state=view_state,
            tooltip={"text": "üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n–§–∞–∫—Ç: {count_trips}\n–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_trips}"}
        ))
    except FileNotFoundError:
        st.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è What-if")

elif page == "üö® –ê–Ω–æ–º–∞–ª–∏–∏":
    st.subheader("üö® –í—ã—è–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫")

    try:
        df = pd.read_csv("data/clean_trips.csv")[["randomized_id", "latitude", "longitude", "timestamp", "spd"]]

        # –ß—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –≤—Å—ë (1.2M —Å—Ç—Ä–æ–∫), –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å–≤–µ—Ä—Ö—É
        max_rows = st.slider("üìä –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å (–¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)", 1000, len(df), 20000, step=1000)
        df = df.head(max_rows)

        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–µ–∑–¥–∫–µ
        stats = []
        for trip_id, trip in df.groupby("randomized_id"):
            trip = trip.sort_values("timestamp")
            total_dist = 0.0
            for i in range(1, len(trip)):
                p1 = (trip.iloc[i-1]["latitude"], trip.iloc[i-1]["longitude"])
                p2 = (trip.iloc[i]["latitude"], trip.iloc[i]["longitude"])
                total_dist += geodesic(p1, p2).km

            avg_speed = trip["spd"].mean()
            stats.append({
                "trip_id": trip_id,
                "distance_km": total_dist,
                "avg_speed": avg_speed,
                "n_points": len(trip)
            })

        stats_df = pd.DataFrame(stats)

        # –ü—Ä–∞–≤–∏–ª–∞ –∞–Ω–æ–º–∞–ª–∏–π
        stats_df["is_anomaly"] = (
            (stats_df["distance_km"] > 30) |   # —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞
            (stats_df["avg_speed"] > 120)      # –Ω–µ—Ä–µ–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        )

        st.success(f"üö® –ù–∞–π–¥–µ–Ω–æ {stats_df['is_anomaly'].sum()} –∞–Ω–æ–º–∞–ª–∏–π –∏–∑ {len(stats_df)} –ø–æ–µ–∑–¥–æ–∫")

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        anomaly_paths, normal_paths = [], []
        for trip_id, trip in df.groupby("randomized_id"):
            path = trip[["longitude", "latitude"]].values.tolist()
            if stats_df.loc[stats_df["trip_id"] == trip_id, "is_anomaly"].iloc[0]:
                anomaly_paths.append({"trip_id": trip_id, "path": path})
            else:
                normal_paths.append({"trip_id": trip_id, "path": path})

        normal_layer = pdk.Layer(
            "PathLayer",
            normal_paths,
            get_path="path",
            get_color=[150, 150, 150],
            width_scale=20,
            width_min_pixels=2,
            pickable=True,
        )
        anomaly_layer = pdk.Layer(
            "PathLayer",
            anomaly_paths,
            get_path="path",
            get_color=[255, 0, 0],
            width_scale=30,
            width_min_pixels=3,
            pickable=True,
        )

        view_state = pdk.ViewState(latitude=51.15, longitude=71.42, zoom=11, pitch=30)
        st.pydeck_chart(pdk.Deck(
            layers=[normal_layer, anomaly_layer],
            initial_view_state=view_state,
            tooltip={"text": "üÜî Trip: {trip_id}"}
        ))

        st.markdown("### üìã –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫")
        st.dataframe(stats_df[stats_df["is_anomaly"]])

    except FileNotFoundError:
        st.error("‚ùå clean_trips.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
